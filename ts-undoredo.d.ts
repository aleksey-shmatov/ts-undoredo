// Generated by dts-bundle v0.3.0
// Dependencies for this module:
//   node_modules/ts-observable/ts-observable.d.ts

declare module 'ts-undoredo' {
    export { IUndoRedoCommand, PropertyChangeCommand, CompositeCommand, AddCommand, RemoveCommand, ReplaceCommand } from '__ts-undoredo/lib/commands';
    export { Recorder } from '__ts-undoredo/lib/recorder';
    export { UndoRedo } from '__ts-undoredo/lib/undoredo';
}

declare module '__ts-undoredo/lib/commands' {
    import { ObservableCollection } from 'ts-observable';
    export interface IUndoRedoCommand {
        getTimestamp(): number;
        getDuration(): number;
        label: string;
        undo(): void;
        redo(): void;
    }
    export class CommandBase implements IUndoRedoCommand {
        constructor();
        getTimestamp(): number;
        getDuration(): number;
        label: string;
        undo(): void;
        redo(): void;
    }
    export class PropertyChangeCommand extends CommandBase {
        constructor(target: any, propertyName: string, newValue: any, oldValue: any);
        oldValue: any;
        newValue: any;
        target: any;
        propertyName: string;
        undo(): void;
        redo(): void;
    }
    export class CompositeCommand extends CommandBase {
        commands: Array<IUndoRedoCommand>;
        constructor(commands: Array<IUndoRedoCommand>);
        getDuration(): number;
        undo(): void;
        redo(): void;
    }
    export class AddCommand extends CommandBase {
        items: Array<any>;
        index: number;
        target: ObservableCollection<any>;
        constructor(target: ObservableCollection<any>, index: number, items: Array<any>);
        undo(): void;
        redo(): void;
    }
    export class RemoveCommand extends CommandBase {
        items: Array<any>;
        index: number;
        target: ObservableCollection<any>;
        constructor(target: ObservableCollection<any>, index: number, items: Array<any>);
        undo(): void;
        redo(): void;
    }
    export class ReplaceCommand extends CommandBase {
        items: Array<any>;
        index: number;
        target: ObservableCollection<any>;
        constructor(target: ObservableCollection<any>, index: number, items: Array<any>);
        undo(): void;
        redo(): void;
    }
}

declare module '__ts-undoredo/lib/recorder' {
    import * as commands from '__ts-undoredo/lib/commands';
    import { INotifyPropertyChanged } from 'ts-observable';
    export class Recorder {
        constructor();
        begin(target: INotifyPropertyChanged): void;
        end(description?: string): commands.IUndoRedoCommand;
    }
}

declare module '__ts-undoredo/lib/undoredo' {
    import * as commands from '__ts-undoredo/lib/commands';
    import { INotifyPropertyChanged } from 'ts-observable';
    export class UndoRedo {
        canUndo(): Boolean;
        canRedo(): Boolean;
        clear(): void;
        add(cmd: commands.IUndoRedoCommand): void;
        undo(): void;
        redo(): void;
        change(target: INotifyPropertyChanged, changeFunction: (target: INotifyPropertyChanged) => string): void;
        beginChange(target: INotifyPropertyChanged): void;
        endChange(description: string): void;
    }
}

